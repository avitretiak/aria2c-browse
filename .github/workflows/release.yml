name: Release

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Release mode'
        required: true
        type: choice
        options:
          - build
          - publish
        default: 'build'
      version:
        description: 'Version number (e.g., 1.0.1)'
        required: true
        type: string
        default: '0.0.0-test'
      description:
        description: 'Release description (only used in publish mode)'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: x86_64-pc-windows-msvc
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
        
    - name: Build and package
      run: |
        $mode = "${{ github.event.inputs.mode }}"
        $version = "${{ github.event.inputs.version }}"
        $description = "${{ github.event.inputs.description }}"
        
        if ($mode -eq "publish") {
          Write-Host "üöÄ Building and publishing version: $version"
          Write-Host "üìù Description: $description"
        } else {
          Write-Host "üß™ Building test version: $version"
        }
        
        # Update version in Cargo.toml
        $content = Get-Content Cargo.toml -Raw
        $content = $content -replace 'version = "([^"]*)"', "version = `"$version`""
        Set-Content Cargo.toml $content -NoNewline
        
        # Build release binary
        cargo build --release --target x86_64-pc-windows-msvc
        
        # Create package
        $packageName = if ($mode -eq "publish") { "aria2c-browse-$version-windows-x64.zip" } else { "aria2c-browse-$version-test.zip" }
        New-Item -ItemType Directory -Force -Path release | Out-Null
        Copy-Item "target\x86_64-pc-windows-msvc\release\aria2c-browse.exe", "register_handler.bat", "README.md", "LICENSE.md" -Destination "release\"
        Compress-Archive -Path "release\*" -DestinationPath $packageName -Force
        
        if ($mode -eq "publish") {
          Write-Host "üì¶ Release package created: $packageName"
        } else {
          Write-Host "‚úÖ Test build completed successfully!"
          Write-Host "üì¶ Test package created: $packageName"
        }
        
    - name: Upload test artifact (build mode)
      if: ${{ github.event.inputs.mode == 'build' }}
      uses: actions/upload-artifact@v4
      with:
        name: test-package
        path: aria2c-browse-${{ github.event.inputs.version }}-test.zip
        
    - name: Create Git tag and release (publish mode)
      if: ${{ github.event.inputs.mode == 'publish' }}
      run: |
        $version = "${{ github.event.inputs.version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Cargo.toml
        git commit -m "Bump version to $version" || exit 0
        git tag -a "v$version" -m "Release v$version"
        git push origin HEAD:${{ github.ref }}
        git push origin "v$version"
        
    - name: Create GitHub Release (publish mode)
      if: ${{ github.event.inputs.mode == 'publish' }}
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## aria2c-browse v${{ github.event.inputs.version }}
          
          ${{ github.event.inputs.description }}
          
          ### Downloads
          - Windows x64: `aria2c-browse-${{ github.event.inputs.version }}-windows-x64.zip`
          
          ### Installation
          1. Extract the ZIP file
          2. Run `register_handler.bat` as administrator to register the URL scheme handler
          3. Use `aria2c://` URLs to download files with aria2c
        files: aria2c-browse-${{ github.event.inputs.version }}-windows-x64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 